image: maven:3.3.9-jdk-8
services:
  - docker:dind 
variables: 
  DOCKER_DRIVER: overlay
  DOCKER_TLS_CERTDIR: ""
  DEPLOYMENT_NAME: flair-user-svc
  REGISTRY_REPO_NAME: flair-user
  DOCKER_REGISTRY: 212423532071.dkr.ecr.eu-west-1.amazonaws.com
  AWS_REGION: eu-west-1 
  AWS_CLUSTER_NAME: 'nss_k8s_cluster'
  # AWS_ECR: 212423532071.dkr.ecr.eu-west-1.amazonaws.com 
  DEV_EKS_NAME: "nss_k8s_cluster"
  PROD_EKS_NAME: "nss_k8s_cluster"
  EKS_SA_PROD: $PROD_EKS
  EKS_SA_DEV: $DEV_EKS    
  memory: "2Gi"
  cpu: "0.5"
  replicas: "1" 

 
         
stages:  
  - build_docker
  - staging
  - production
  # - package
  # - deploy
 
 

# cache:
#   paths:
#     - .m2/repository
#     - target/
 
 
 

 
 
 
build_dev:
  stage: build_docker
  environment:
    name: qa
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_REGISTRY: 212423532071.dkr.ecr.eu-west-1.amazonaws.com
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws --version
    - docker --version
  script: 
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    # - docker pull $DOCKER_REGISTRY/$DEPLOYMENT_NAME:latest || true
    - docker build  -t $DOCKER_REGISTRY/$REGISTRY_REPO_NAME:$CI_PIPELINE_IID .
    - docker push $DOCKER_REGISTRY/$REGISTRY_REPO_NAME:$CI_PIPELINE_IID 
  only:
    - dev


build_prod:
  stage: build_docker
  environment:
    name: production
  image: 
    name: amazon/aws-cli
    entrypoint: [""]
  variables:
    DOCKER_DRIVER: overlay
    DOCKER_HOST: tcp://docker:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_REGISTRY: 212423532071.dkr.ecr.eu-west-1.amazonaws.com
  services:
    - docker:dind
  before_script:
    - amazon-linux-extras install docker
    - aws configure set aws_access_key_id $AWS_ACCESS_KEY_ID
    - aws configure set aws_secret_access_key $AWS_SECRET_ACCESS_KEY
    - aws configure set region $AWS_REGION
    - aws --version
    - docker --version
  script: 
    - aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $DOCKER_REGISTRY
    # - docker pull $DOCKER_REGISTRY/$DEPLOYMENT_NAME:latest || true
    - docker build  -t $DOCKER_REGISTRY/$REGISTRY_REPO_NAME:$CI_PIPELINE_IID .
    - docker push $DOCKER_REGISTRY/$REGISTRY_REPO_NAME:$CI_PIPELINE_IID 
  only:
    - main
    - master
    
 

.kubectl_config: &kubectl_config
  - aws eks --region $AWS_REGION update-kubeconfig --name $AWS_CLUSTER_NAME

staging: 
  image: 
    name: public.ecr.aws/c5c7f0b8/aws-helm-kubectl
    entrypoint: [""]  
  stage: staging
  variables:
    K8S_NAMESPACE: default
  before_script: *kubectl_config
  script: 
    - helm upgrade ${DEPLOYMENT_NAME} --install  --wait --set image.tag=$CI_PIPELINE_IID .devops/k8s/${DEPLOYMENT_NAME}   -f .devops/k8s/${DEPLOYMENT_NAME}/values.yaml -n  flair-dev
  only:
    - dev 


.kubectl_config_prod: &kubectl_config_prod
  - aws eks --region $AWS_REGION update-kubeconfig --name $AWS_CLUSTER_NAME

production: 
  image: 
    name: public.ecr.aws/c5c7f0b8/aws-helm-kubectl
    entrypoint: [""]  
  stage: production
  variables:
    K8S_NAMESPACE: default
  before_script: *kubectl_config_prod
  script: 
    - helm upgrade ${DEPLOYMENT_NAME} --install  --wait --set image.tag=$CI_PIPELINE_IID .devops/k8s/${DEPLOYMENT_NAME}   -f .devops/k8s/${DEPLOYMENT_NAME}/prod-values.yaml -n  flair-prod
  only:
    - main
    - master
